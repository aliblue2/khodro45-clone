// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/v1/health": {
            "get": {
                "description": "health check by calling a get request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "health check of v1 api",
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/helper.BaseResponse"
                        }
                    },
                    "400": {
                        "description": "failed",
                        "schema": {
                            "$ref": "#/definitions/helper.BaseResponse"
                        }
                    }
                }
            }
        },
        "/v1/health/{id}": {
            "get": {
                "description": "health check by calling a get request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "health check of v1 api",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/helper.BaseResponse"
                        }
                    },
                    "400": {
                        "description": "failed",
                        "schema": {
                            "$ref": "#/definitions/helper.BaseResponse"
                        }
                    }
                }
            }
        },
        "/v1/test/signup": {
            "post": {
                "description": "signup user with mobile number",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "signup"
                ],
                "summary": "signup",
                "parameters": [
                    {
                        "description": "person",
                        "name": "person",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.PersonWithNumber"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "PersonWithNumber"
                        }
                    },
                    "400": {
                        "description": "failed",
                        "schema": {
                            "$ref": "#/definitions/helper.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "failed",
                        "schema": {
                            "$ref": "#/definitions/helper.BaseResponse"
                        }
                    }
                }
            }
        },
        "/v1/test/upload-files": {
            "post": {
                "description": "upload file to server",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "upload"
                ],
                "summary": "file upload",
                "parameters": [
                    {
                        "type": "file",
                        "description": "file",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/helper.BaseResponse"
                        }
                    },
                    "400": {
                        "description": "failed",
                        "schema": {
                            "$ref": "#/definitions/helper.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "failed",
                        "schema": {
                            "$ref": "#/definitions/helper.BaseResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.PersonWithNumber": {
            "type": "object",
            "required": [
                "first_name",
                "last_name",
                "number",
                "password"
            ],
            "properties": {
                "first_name": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 3
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 3
                },
                "number": {
                    "type": "string",
                    "maxLength": 11,
                    "minLength": 11
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "helper.BaseResponse": {
            "type": "object",
            "properties": {
                "error": {},
                "result": {},
                "result-code": {
                    "type": "integer"
                },
                "success": {
                    "type": "boolean"
                },
                "validation-error": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/validations.ValidationError"
                    }
                }
            }
        },
        "validations.ValidationError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "property": {
                    "type": "string"
                },
                "tag": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
